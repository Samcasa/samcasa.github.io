<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MATRIX</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-30T11:15:20.793Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>sam</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RxJava在项目中的使用（一）</title>
    <link href="http://yoursite.com/2017/07/07/rxjava-project/"/>
    <id>http://yoursite.com/2017/07/07/rxjava-project/</id>
    <published>2017-07-06T16:00:00.000Z</published>
    <updated>2017-09-30T11:15:20.793Z</updated>
    
    <content type="html"><![CDATA[<p>RxJava可以由create-&gt;subcribeon-&gt;observeron-&gt;subscribe链式调用完整呈现。但是回到前面我举例的打印机项目就不能这样了.</p><p>我们必须有一个观察者放到蓝牙接收的类里，不过我们可以在需要观察的地方埋设一个发射器emmit,在需要发消息的地方用onnext（）发消息.来看代码呈现：<br><a id="more"></a></p><p>先定义一个事件类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeEvent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Type &#123;</div><div class="line">        OPENED, CLOSED, ERROR,ACTION_DEVICE_REAL_STATUS_NORMAL,ACTION_DEVICE_REAL_STATUS_UNNORMAL,SEND_RECEIPT,GP_PAIRED</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Type mType;</div><div class="line"></div><div class="line">    <span class="comment">//Nullable</span></div><div class="line">    <span class="keyword">private</span> Exception mException;</div><div class="line"></div><div class="line">    <span class="comment">//Nullable</span></div><div class="line">    <span class="keyword">private</span> String mMessage;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifeEvent</span><span class="params">(Type type)</span> </span>&#123;</div><div class="line">        mType = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifeEvent</span><span class="params">(Type type, Exception exception)</span> </span>&#123;</div><div class="line">        mType = type;</div><div class="line">        mException = exception;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifeEvent</span><span class="params">(Type type, String message)</span> </span>&#123;</div><div class="line">        mType = type;</div><div class="line">        mMessage = message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Exception <span class="title">getException</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mException;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mMessage;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>定义好事件后，我们需要埋设一个发射器在事件发生源了，这里的事件发生源就是广播接收者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> List&lt;FlowableEmitter&lt;? <span class="keyword">super</span> LifeEvent&gt;&gt; mEmmit;</div><div class="line"><span class="function"><span class="keyword">public</span> Flowable&lt;LifeEvent&gt; <span class="title">getEvent</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> Flowable.&lt;LifeEvent&gt;create(<span class="keyword">new</span> FlowableOnSubscribe&lt;LifeEvent&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;LifeEvent&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            mEmmit.add(e);</div><div class="line">        &#125;</div><div class="line">    &#125;, BackpressureStrategy.BUFFER);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>之所以事件发射器集合去接收一个发射器，是因为可能有多个页面需要埋设一个发射器，但是又不想让别的受影响。所以我们用一个 List<flowableemitter<? super="" lifeevent="">&gt; 集合管理。</flowableemitter<?></p><p>在这个页面埋设了一个发射器后，就可以根据具体的事件去发射消息了,完整代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        <span class="comment">//LogUtil.e(TAG, "onReceive---------");</span></div><div class="line">        <span class="keyword">this</span>.context=context;</div><div class="line">        <span class="keyword">switch</span>(intent.getAction())&#123;</div><div class="line">            <span class="keyword">case</span> GpCom.ACTION_DEVICE_REAL_STATUS:</div><div class="line">                <span class="keyword">int</span> requestCode = intent.getIntExtra(GpCom.EXTRA_PRINTER_REQUEST_CODE, -<span class="number">1</span>);</div><div class="line">                <span class="keyword">if</span> (requestCode == MAIN_QUERY_PRINTER_STATUS) &#123;</div><div class="line">                    <span class="keyword">int</span>    status = intent.getIntExtra(GpCom.EXTRA_PRINTER_REAL_STATUS, <span class="number">16</span>);</div><div class="line">                    String str;</div><div class="line">                    <span class="keyword">if</span> (status == GpCom.STATE_NO_ERR) &#123;</div><div class="line">                        str = <span class="string">"打印机正常"</span>;</div><div class="line">                      <span class="comment">//  BluetoothObserver.getInstance().stateChanged(BluetoothObserver.ACTION_DEVICE_REAL_STATUS_NORMAL);</span></div><div class="line">                        LifeEvent event=<span class="keyword">new</span> LifeEvent(LifeEvent.Type.ACTION_DEVICE_REAL_STATUS_NORMAL);</div><div class="line">                        emitEvent(event);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        str = <span class="string">"打印机 "</span>;</div><div class="line">                        <span class="keyword">if</span> ((<span class="keyword">byte</span>) (status &amp; GpCom.STATE_OFFLINE) &gt; <span class="number">0</span>) &#123;</div><div class="line">                            str += <span class="string">"脱机,正在重连"</span>;</div><div class="line">                            showToast(str);</div><div class="line">                            <span class="comment">//BluetoothObserver.getInstance().stateChanged(BluetoothObserver.ACTION_DEVICE_REAL_STATUS_UNNORMAL);</span></div><div class="line">                            emitEvent(<span class="keyword">new</span> LifeEvent(LifeEvent.Type.ACTION_DEVICE_REAL_STATUS_UNNORMAL));</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> ((<span class="keyword">byte</span>) (status &amp; GpCom.STATE_PAPER_ERR) &gt; <span class="number">0</span>) &#123;</div><div class="line">                            str += <span class="string">"缺纸"</span>;</div><div class="line">                            showToast(str);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> ((<span class="keyword">byte</span>) (status &amp; GpCom.STATE_COVER_OPEN) &gt; <span class="number">0</span>) &#123;</div><div class="line">                            str += <span class="string">"开盖"</span>;</div><div class="line">                            showToast(str);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> ((<span class="keyword">byte</span>) (status &amp; GpCom.STATE_ERR_OCCURS) &gt; <span class="number">0</span>) &#123;</div><div class="line">                            str += <span class="string">"出错"</span>;</div><div class="line">                            showToast(str+<span class="string">"请重启"</span>);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> ((<span class="keyword">byte</span>) (status &amp; GpCom.STATE_TIMES_OUT) &gt; <span class="number">0</span>) &#123;</div><div class="line">                            str += <span class="string">"查询超时"</span>;</div><div class="line">                            showToast(str+<span class="string">"请重启"</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (requestCode == REQUEST_PRINT_RECEIPT) &#123;</div><div class="line">                    <span class="keyword">int</span> status = intent.getIntExtra(GpCom.EXTRA_PRINTER_REAL_STATUS, <span class="number">16</span>);</div><div class="line">                    <span class="keyword">if</span> (status == GpCom.STATE_NO_ERR) &#123;</div><div class="line">                       <span class="comment">// BluetoothObserver.getInstance().stateChanged(BluetoothObserver.SEND_RECEIPT);</span></div><div class="line">                        emitEvent(<span class="keyword">new</span> LifeEvent(LifeEvent.Type.SEND_RECEIPT));</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        Toast.makeText(context, <span class="string">"query printer status error"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BluetoothDevice.ACTION_FOUND:</div><div class="line">                mDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (mDevice.getName().contains(<span class="string">"Feasycom"</span>) || mDevice.getName().contains(<span class="string">"Printer"</span>)) &#123;</div><div class="line">                        noDevice=<span class="keyword">false</span>;</div><div class="line">                        mDevice.getName();</div><div class="line">                        ClsUtils.createBond(mDevice.getClass(), mDevice);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BluetoothAdapter.ACTION_DISCOVERY_FINISHED:</div><div class="line">                <span class="keyword">if</span>(noDevice)&#123;</div><div class="line">                    showToast(<span class="string">"没有找到打印机,请开启或重启打印机"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BluetoothDevice.ACTION_PAIRING_REQUEST:</div><div class="line">                <span class="keyword">if</span> (mDevice.getName().contains(<span class="string">"Feasycom"</span>) || mDevice.getName().contains(<span class="string">"Printer"</span>))</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        ClsUtils.setPairingConfirmation(mDevice.getClass(), mDevice, <span class="keyword">true</span>);</div><div class="line">                        abortBroadcast();<span class="comment">//如果没有将广播终止，则会出现一个一闪而过的配对框。</span></div><div class="line">                        <span class="comment">//3.调用setPin方法进行配对...</span></div><div class="line">                        <span class="keyword">boolean</span> ret = ClsUtils.setPin(mDevice.getClass(), mDevice, <span class="string">"0000"</span>);</div><div class="line">                        <span class="keyword">if</span> (ret) &#123;</div><div class="line">                            Toast.makeText(context, <span class="string">"配对成功"</span>, Toast.LENGTH_LONG)</div><div class="line">                                    .show();</div><div class="line">                            emitEvent(<span class="keyword">new</span> LifeEvent(LifeEvent.Type.GP_PAIRED));</div><div class="line"></div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            Toast.makeText(context, <span class="string">"配对失败"</span>, Toast.LENGTH_LONG)</div><div class="line">                                    .show();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line"></div><div class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                        <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">emitEvent</span><span class="params">(LifeEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(FlowableEmitter&lt;? <span class="keyword">super</span> LifeEvent&gt; emitter:mEmmit)&#123;</div><div class="line">            emitter.onNext(event);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Flowable&lt;LifeEvent&gt; <span class="title">getEvent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> Flowable.&lt;LifeEvent&gt;create(<span class="keyword">new</span> FlowableOnSubscribe&lt;LifeEvent&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;LifeEvent&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                mEmmit.add(e);</div><div class="line">            &#125;</div><div class="line">        &#125;, BackpressureStrategy.BUFFER);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>使用的时候：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">BluetoothFlowableReceiver receiver=<span class="keyword">new</span> BluetoothFlowableReceiver();</div><div class="line">receiver.getEvent().subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(<span class="keyword">new</span> Consumer&lt;LifeEvent&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(LifeEvent lifeEvent)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (lifeEvent.getType())&#123;</div><div class="line">            <span class="keyword">case</span> ACTION_DEVICE_REAL_STATUS_NORMAL:</div><div class="line">                gpPrint();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> ACTION_DEVICE_REAL_STATUS_UNNORMAL:</div><div class="line">                <span class="comment">//发现状态错误</span></div><div class="line">                <span class="comment">//1.先看看有没有配对</span></div><div class="line">                doGetBondedDevices();</div><div class="line">                <span class="keyword">if</span>(mDevice!=<span class="keyword">null</span>)&#123;</div><div class="line">                    <span class="comment">//配对了</span></div><div class="line">                    connectOrDisConnectToDevice();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="comment">//去配对</span></div><div class="line">                    mBtAdapter.startDiscovery();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> SEND_RECEIPT:</div><div class="line">                sendReceipt();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> GP_PAIRED:</div><div class="line">                connectOrDisConnectToDevice();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>这样我们通过埋设发射器的方式，实现了观察者和被观察者在不同类中实现RxJava链式调用.<br>比传统的观察者模式更有优势。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RxJava可以由create-&amp;gt;subcribeon-&amp;gt;observeron-&amp;gt;subscribe链式调用完整呈现。但是回到前面我举例的打印机项目就不能这样了.&lt;/p&gt;
&lt;p&gt;我们必须有一个观察者放到蓝牙接收的类里，不过我们可以在需要观察的地方埋设一个发射器emmit,在需要发消息的地方用onnext（）发消息.来看代码呈现：&lt;br&gt;
    
    </summary>
    
      <category term="RXJava系列" scheme="http://yoursite.com/categories/RXJava%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>websocket长连接和stomp</title>
    <link href="http://yoursite.com/2017/06/18/websocket/"/>
    <id>http://yoursite.com/2017/06/18/websocket/</id>
    <published>2017-06-17T16:00:00.000Z</published>
    <updated>2017-09-30T09:26:03.960Z</updated>
    
    <content type="html"><![CDATA[<p>websocket和http1.1都可以实现长连接，所谓长连接就是连接可以保持长时间，那他们有什么区别呢？<br><a id="more"></a><br>了解他们的区别前，先看看http1.1和http1.0的区别．用这张图，我觉得时很合适的：</p><p><img src="https://github.com/Samcasa/samcasa.github.io/blob/master/images/http1.0.png?raw=true" alt=""></p><p>http1.0发起请求，建立连接，断开，再发起请求，建立连接，断开．http1.1发起请求，链接会保持一段时间，发起请求，找到已经存在的链接，再发起请求再去找这个链接．优势时很明显的，节约了很多资源．注意：</p><ul><li>http1.0客户端发起请求加上字段Connection：keep-alive，服务端收到后也会回复keep-alive字段，连接就会保持．http1.1默认keep-alive</li></ul><p>websocket和http长连接的区别<br><img src="https://github.com/Samcasa/samcasa.github.io/blob/master/images/websocket.png?raw=true" alt="websocket"></p><p>只要keep-alive时间设置足够长，理论上就可以一直保持长连接，但是如图所示：http长连接的模式还是去服务器问的半双工轮旬模式，实时性不够，浪费资源，而webscoket一次建立，则开启全双工模式，一次建立，则实时数据传输．</p><p>关于http,websocket和stomp<br><img src="https://github.com/Samcasa/samcasa.github.io/blob/master/images/stomp.png?raw=true" alt=""></p><p>上图直观阐述了http和websocket都是基于ＴＣＰ开发，而xmpp和stomp时基于websocket开发的数据交换格式协议．</p><p>stomp的队列订阅示意：<br><img src="https://github.com/Samcasa/samcasa.github.io/blob/master/images/line.png?raw=true" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;websocket和http1.1都可以实现长连接，所谓长连接就是连接可以保持长时间，那他们有什么区别呢？&lt;br&gt;
    
    </summary>
    
      <category term="网络基础" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="websocket" scheme="http://yoursite.com/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>理解RxJava初探（一）</title>
    <link href="http://yoursite.com/2017/06/03/rxjava1/"/>
    <id>http://yoursite.com/2017/06/03/rxjava1/</id>
    <published>2017-06-02T16:00:00.000Z</published>
    <updated>2017-09-30T09:27:31.946Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>ＲxJava引入</em></strong></p><p>为啥要RxJava？</p><p>提高代码的阅读性，减少切换线程数据通信的代码冗余并提高可控性．<br><a id="more"></a><br>这些我看不太明白啊，我不用Rxjava可不可以？</p><p>恩，其实观察者模式就可以解决很多问题，比如这个打印机功能项目，里面没有用到rxjava，只用到了观察者模式，当收到广播的时候根据不同的广播执行不同的指令，项目地址：<a href="https://github.com/Samcasa/GPprinter，" target="_blank" rel="external">https://github.com/Samcasa/GPprinter，</a><br>（如果不了解观察者模式的朋友一定要去搞懂，观察者模式是根本）．核心代码如下：</p><p>观察者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BluetoothObserver</span></span></div><div class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">Observable</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SEND_RECEIPT                  = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FEASYCOM_PAIRED               = <span class="number">2</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GP_PAIRED                     = <span class="number">3</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_TURNING_OFF             = <span class="number">4</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_OFF                     = <span class="number">5</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ACTION_DEVICE_REAL_STATUS_NORMAL     = <span class="number">6</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ACTION_DEVICE_REAL_STATUS_UNNORMAL = <span class="number">7</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BluetoothObserver mBluetoothObserver;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BluetoothObserver</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BluetoothObserver <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(mBluetoothObserver==<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">synchronized</span> (BluetoothObserver.class)&#123;</div><div class="line">                <span class="keyword">if</span> (mBluetoothObserver==<span class="keyword">null</span>)&#123;</div><div class="line">                    mBluetoothObserver=<span class="keyword">new</span> BluetoothObserver();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mBluetoothObserver;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(<span class="keyword">int</span> state)</span></span>&#123;</div><div class="line">        setChanged();</div><div class="line">        Log.d(<span class="string">"aaaa"</span>, <span class="string">"setchanged"</span>);</div><div class="line">        notifyObservers(state);</div><div class="line">        Log.d(<span class="string">"aaaa"</span>, <span class="string">"notifyObservers"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>观察者在这里面发送事件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">    <span class="comment">//LogUtil.e(TAG, "onReceive---------");</span></div><div class="line">    <span class="keyword">this</span>.context=context;</div><div class="line">    <span class="keyword">switch</span>(intent.getAction())&#123;</div><div class="line">        <span class="keyword">case</span> BluetoothAdapter.ACTION_STATE_CHANGED:</div><div class="line">            <span class="keyword">int</span> blueState = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, <span class="number">0</span>);</div><div class="line">            <span class="keyword">switch</span>(blueState)&#123;</div><div class="line">                <span class="keyword">case</span> BluetoothAdapter.STATE_TURNING_ON:</div><div class="line">                    BluetoothObserver.getInstance().stateChanged(BluetoothObserver.STATE_TURNING_OFF);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> BluetoothAdapter.STATE_ON:</div><div class="line">                    BluetoothObserver.getInstance().stateChanged(BluetoothObserver.STATE_TURNING_OFF);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> BluetoothAdapter.STATE_TURNING_OFF:</div><div class="line">                    BluetoothObserver.getInstance().stateChanged(BluetoothObserver.STATE_TURNING_OFF);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> BluetoothAdapter.STATE_OFF:</div><div class="line">                    BluetoothObserver.getInstance().stateChanged(BluetoothObserver.STATE_OFF);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> GpCom.ACTION_DEVICE_REAL_STATUS:</div><div class="line">            <span class="keyword">int</span> requestCode = intent.getIntExtra(GpCom.EXTRA_PRINTER_REQUEST_CODE, -<span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (requestCode == MAIN_QUERY_PRINTER_STATUS) &#123;</div><div class="line">                <span class="keyword">int</span>    status = intent.getIntExtra(GpCom.EXTRA_PRINTER_REAL_STATUS, <span class="number">16</span>);</div><div class="line">                String str;</div><div class="line">                <span class="keyword">if</span> (status == GpCom.STATE_NO_ERR) &#123;</div><div class="line">                    str = <span class="string">"打印机正常"</span>;</div><div class="line">                    BluetoothObserver.getInstance().stateChanged(BluetoothObserver.ACTION_DEVICE_REAL_STATUS_NORMAL);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    str = <span class="string">"打印机 "</span>;</div><div class="line">                    <span class="keyword">if</span> ((<span class="keyword">byte</span>) (status &amp; GpCom.STATE_OFFLINE) &gt; <span class="number">0</span>) &#123;</div><div class="line">                        str += <span class="string">"脱机,正在重连"</span>;</div><div class="line">                        showToast(str);</div><div class="line">                        BluetoothObserver.getInstance().stateChanged(BluetoothObserver.ACTION_DEVICE_REAL_STATUS_UNNORMAL);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> ((<span class="keyword">byte</span>) (status &amp; GpCom.STATE_PAPER_ERR) &gt; <span class="number">0</span>) &#123;</div><div class="line">                        str += <span class="string">"缺纸"</span>;</div><div class="line">                        showToast(str);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> ((<span class="keyword">byte</span>) (status &amp; GpCom.STATE_COVER_OPEN) &gt; <span class="number">0</span>) &#123;</div><div class="line">                        str += <span class="string">"开盖"</span>;</div><div class="line">                        showToast(str);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> ((<span class="keyword">byte</span>) (status &amp; GpCom.STATE_ERR_OCCURS) &gt; <span class="number">0</span>) &#123;</div><div class="line">                        str += <span class="string">"出错"</span>;</div><div class="line">                        showToast(str+<span class="string">"请重启"</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> ((<span class="keyword">byte</span>) (status &amp; GpCom.STATE_TIMES_OUT) &gt; <span class="number">0</span>) &#123;</div><div class="line">                        str += <span class="string">"查询超时"</span>;</div><div class="line">                        showToast(str+<span class="string">"请重启"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (requestCode == REQUEST_PRINT_RECEIPT) &#123;</div><div class="line">                <span class="keyword">int</span> status = intent.getIntExtra(GpCom.EXTRA_PRINTER_REAL_STATUS, <span class="number">16</span>);</div><div class="line">                <span class="keyword">if</span> (status == GpCom.STATE_NO_ERR) &#123;</div><div class="line">                    BluetoothObserver.getInstance().stateChanged(BluetoothObserver.SEND_RECEIPT);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Toast.makeText(context, <span class="string">"query printer status error"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> BluetoothDevice.ACTION_FOUND:</div><div class="line">            mDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (mDevice.getName().contains(<span class="string">"Feasycom"</span>) || mDevice.getName().contains(<span class="string">"Printer"</span>)) &#123;</div><div class="line">                    noDevice=<span class="keyword">false</span>;</div><div class="line">                    mDevice.getName();</div><div class="line">                    ClsUtils.createBond(mDevice.getClass(), mDevice);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> BluetoothAdapter.ACTION_DISCOVERY_FINISHED:</div><div class="line">            <span class="keyword">if</span>(noDevice)&#123;</div><div class="line">                showToast(<span class="string">"没有找到打印机,请开启或重启打印机"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> BluetoothDevice.ACTION_PAIRING_REQUEST:</div><div class="line">            <span class="keyword">if</span> (mDevice.getName().contains(<span class="string">"Feasycom"</span>) || mDevice.getName().contains(<span class="string">"Printer"</span>))</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    ClsUtils.setPairingConfirmation(mDevice.getClass(), mDevice, <span class="keyword">true</span>);</div><div class="line">                    abortBroadcast();<span class="comment">//如果没有将广播终止，则会出现一个一闪而过的配对框。</span></div><div class="line">                    <span class="comment">//3.调用setPin方法进行配对...</span></div><div class="line">                    <span class="keyword">boolean</span> ret = ClsUtils.setPin(mDevice.getClass(), mDevice, <span class="string">"0000"</span>);</div><div class="line">                    <span class="keyword">if</span> (ret) &#123;</div><div class="line">                        Toast.makeText(context, <span class="string">"配对成功"</span>, Toast.LENGTH_LONG)</div><div class="line">                             .show();</div><div class="line">                        <span class="keyword">if</span>(mDevice.getName().contains(<span class="string">"Feasycom"</span>))&#123;</div><div class="line">                            BluetoothObserver.getInstance().stateChanged(BluetoothObserver.FEASYCOM_PAIRED);</div><div class="line">                        &#125;<span class="keyword">else</span>&#123;</div><div class="line">                            BluetoothObserver.getInstance().stateChanged(BluetoothObserver.GP_PAIRED);</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        Toast.makeText(context, <span class="string">"配对失败"</span>, Toast.LENGTH_LONG)</div><div class="line">                             .show();</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>被观察者实现obsever接口后接收事件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">BluetoothObserver.getInstance().addObserver(<span class="keyword">this</span>);</div><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable observable, Object o)</span> </span>&#123;</div><div class="line">      <span class="keyword">int</span> type= (<span class="keyword">int</span>) o;</div><div class="line">      <span class="keyword">switch</span> (type)&#123;</div><div class="line">          <span class="keyword">case</span> BluetoothObserver.SEND_RECEIPT:</div><div class="line">              sendReceipt();</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> BluetoothObserver.ACTION_DEVICE_REAL_STATUS_NORMAL:</div><div class="line">              gpPrint();</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> BluetoothObserver.ACTION_DEVICE_REAL_STATUS_UNNORMAL:</div><div class="line">              <span class="comment">//发现状态错误</span></div><div class="line">              <span class="comment">//1.先看看有没有配对</span></div><div class="line">              doGetBondedDevices();</div><div class="line">              <span class="keyword">if</span>(mDevice!=<span class="keyword">null</span>)&#123;</div><div class="line">                  <span class="comment">//配对了</span></div><div class="line">                  connectOrDisConnectToDevice();</div><div class="line">              &#125;<span class="keyword">else</span>&#123;</div><div class="line">                  <span class="comment">//去配对</span></div><div class="line">                  mBtAdapter.startDiscovery();</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> BluetoothObserver.GP_PAIRED:</div><div class="line">              Log.d(<span class="string">"aaaa"</span>,<span class="string">"11111"</span>);</div><div class="line">              connectOrDisConnectToDevice();</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>这里面实现了观察者和被观察者，貌似解决了问题，但是仔细一想，还是有很多问题的：</p><p>1.上面的观察者连续不断的发事件，被观察者事件只能不断的接收，去调用里面的方法，如果连续发1000次，就要调1000次方法．应用必卡死．</p><p>2.上面的观察者收到广播只是简单的发一个指令，假如发一个图片．甚至是一个文件呢，我想要在观察者收到指令就处理一部分任务，而不仅仅是通知．</p><p>这时候就引入了一个牛逼的东西了–RxJava</p><p>ＲxJava可以做到．</p><p>一次性收到很多消息的时候，可以使用内置：buffer,latest,drop多种模式对收到的消息进行处理．<br>可以使用subscribeOn(Schedulers.io())进行耗时操作，再observeOn(AndroidSchedulers.mainThread())返回到主线程进行处理．<br>完美．．．</p><p>目前认识到rxjava的重要性，接下来找些资料，作者写的很用心，看完这个基本没问题了：<br><a href="http://www.jianshu.com/p/464fa025229e" target="_blank" rel="external">http://www.jianshu.com/p/464fa025229e</a></p><p>下一篇我会说一些RxJava的变形，方便更好的使用Rxjava</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;ＲxJava引入&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为啥要RxJava？&lt;/p&gt;
&lt;p&gt;提高代码的阅读性，减少切换线程数据通信的代码冗余并提高可控性．&lt;br&gt;
    
    </summary>
    
      <category term="RXJava系列" scheme="http://yoursite.com/categories/RXJava%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>理解RxJava应用（二）</title>
    <link href="http://yoursite.com/2017/06/03/rxjava2/"/>
    <id>http://yoursite.com/2017/06/03/rxjava2/</id>
    <published>2017-06-02T16:00:00.000Z</published>
    <updated>2017-09-30T09:21:06.244Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>RxJava应用</em></strong></p><p>如果你看完上一篇里我推荐的RxJava九篇文章，相信你已经对RxJava完全不陌生并能开始运用了．我这里再说一些RxJava要注意的点<br><a id="more"></a><br>１．RxJava2.0中Observerable和Flowable的区别，先上代码：</p><p>Flowable:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; e)</span></span></div><div class="line"><span class="function">           <span class="keyword">throws</span> Exception</span></div><div class="line"><span class="function">   </span>&#123;</div><div class="line">       Log.d(<span class="string">"rxman"</span>,e.requested()+<span class="string">""</span>);</div><div class="line">       e.onNext(<span class="number">0</span>);</div><div class="line">   &#125;</div><div class="line">&#125;, BackpressureStrategy.BUFFER).subscribeOn(Schedulers.io()).</div><div class="line">               observeOn(AndroidSchedulers.mainThread()).</div><div class="line">       subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">               Log.d(<span class="string">"rxman"</span>, <span class="string">"onSubscribe"</span>);</div><div class="line">               s.request(<span class="number">1</span>);</div><div class="line">           &#125;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">               Log.d(<span class="string">"rxman"</span>, <span class="string">"onnext"</span>+integer);</div><div class="line">           &#125;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">           &#125;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">               Log.d(<span class="string">"rxman"</span>, <span class="string">"oncomplete"</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure></p><p>Observerable:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; e)</span></span></div><div class="line"><span class="function">              <span class="keyword">throws</span> Exception</span></div><div class="line"><span class="function">      </span>&#123;</div><div class="line">            e.onNext(<span class="number">0</span>);</div><div class="line">      &#125;</div><div class="line">  &#125;).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line">          Log.d(<span class="string">"rxman"</span>, <span class="string">"onSubscribe"</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</div><div class="line">          Log.d(<span class="string">"rxman"</span>, <span class="string">"onnext"</span>+value);</div><div class="line">      &#125;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">      &#125;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">      &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p><p>Flowable和Observerable 相比，不同的一个就是Ｆlowable是拉取式的，只有onSubscribe里面写了你要多少个，他才会给你发多少个s.request(1);，结合BackpressureStrategy.BUFFER,BackpressureStrategy.LATEST,BackpressureStrategy.DROP,对发送消息阶段实现了处理．</p><p>但是也不是绝对的，比如这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; e)</span></span></div><div class="line"><span class="function">                   <span class="keyword">throws</span> Exception</span></div><div class="line"><span class="function">           </span>&#123;</div><div class="line">               Log.d(<span class="string">"rxman"</span>,e.requested()+<span class="string">""</span>);</div><div class="line">               e.onNext(<span class="number">0</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;, BackpressureStrategy.BUFFER).subscribeOn(Schedulers.io()).</div><div class="line">                       observeOn(AndroidSchedulers.mainThread()).</div><div class="line">                       subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">                           <span class="meta">@Override</span></div><div class="line">                           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span></span></div><div class="line"><span class="function">                                   <span class="keyword">throws</span> Exception</span></div><div class="line"><span class="function">                           </span>&#123;</div><div class="line">                               Log.d(<span class="string">"rxman"</span>,integer+<span class="string">""</span>);</div><div class="line">                           &#125;</div><div class="line">                       &#125;);</div></pre></td></tr></table></figure></p><p>subscribe实现的是new Consumer(),并咩有request(),但是照样发消息，查看文档就会发现其实这个方法默认实现了request(Integer.MAX_VALUE).</p><p>再变换一下呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Flowable.&lt;Integer&gt;create(e-&gt; e.onNext(<span class="number">0</span>),BackpressureStrategy.BUFFER).subscribeOn(Schedulers.io())</div><div class="line">              .observeOn(AndroidSchedulers.mainThread()).subscribe(integer -&gt; Log.d(<span class="string">"rxman"</span>,integer+<span class="string">""</span>));</div></pre></td></tr></table></figure></p><p>用上Lambda之后，代码更简洁，但是可读性也变差了．这是展示Ｌambda变换流程，只是方便大家取看别人的代码，万一别人这样缩进，你也明白为啥．</p><p>下一篇将讲讲RxJava在项目中的运用．</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;RxJava应用&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你看完上一篇里我推荐的RxJava九篇文章，相信你已经对RxJava完全不陌生并能开始运用了．我这里再说一些RxJava要注意的点&lt;br&gt;
    
    </summary>
    
      <category term="RXJava系列" scheme="http://yoursite.com/categories/RXJava%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>理解python WSGI--来看看python如何&quot;接口回调&quot;</title>
    <link href="http://yoursite.com/2017/05/23/python_wsgi/"/>
    <id>http://yoursite.com/2017/05/23/python_wsgi/</id>
    <published>2017-05-22T16:00:00.000Z</published>
    <updated>2017-09-30T09:20:50.781Z</updated>
    
    <content type="html"><![CDATA[<p>接口回调时java的一种说法，python是没有接口回调这个概念的，但是却可以巧妙的实现，而且实现的比java更省代码，先来说说Java的接口回调是怎么回事吧．<br><a id="more"></a></p><p>先了解下Java接口的概念，两个问题为什么要有接口，接口有什么用．</p><p>1.java为啥要有接口？人家python就不要．</p><p>答：因为java是单继承，python是多继承，比如java里面定义了一个animal的基类，animal里面定义了run(),eat(),shit()方法，猫狗马子类去继承，run,eat,shit对动物都是共通的，牛也去继承，但是牛觉得eat run shit不够，我还有艺术上play instrument的追求，它去要求基类增加一个play instrument的方法，基类说这个我管不着，于是接口的概念就来了，牛只需要去实现一个play instrument的接口就可以了，python就粗暴多了，你要play instrument是吧，那你再继承一个艺术家的类，自己去里面拿．想拿啥拿啥（继承的概念还是不清楚的可以再去翻翻其他文章)</p><p>2.接口能干啥用？</p><p>　答：上面说了一部分，接口能扩展子类的功能，这样理解在复杂一点的项目里面还是不够的，在java编程思想这本书中有一个更妙的的回答：接口可以用来给对象发消息．这就引出了接口回调的设计目的：从一个对象给另外一个对象发消息</p><p>接口回掉图示意：<br><img src="http://img.blog.csdn.net/20170922180604630?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2FtY2FzYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="interface"></p><p>开关代码示意：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Switcher</span></span>&#123;</div><div class="line">     switchListener switchListener;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="title">setOnSwitchListener</span><span class="params">(<span class="keyword">switch</span> switchListener)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.switchListner=switchListner;</div><div class="line">&#125;</div><div class="line">      <span class="class"><span class="keyword">interface</span> <span class="title">switchListener</span></span></div><div class="line"><span class="class">     </span>&#123;</div><div class="line">            <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>;</div><div class="line">            <span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>;</div><div class="line">     &#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwitchon</span><span class="params">()</span></span>&#123;</div><div class="line">          switchListner.on();</div><div class="line">&#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwitchoff</span><span class="params">()</span></span>&#123;</div><div class="line">          switchListner.off();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>空调的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirConditional</span> <span class="keyword">implements</span> <span class="title">switchLister</span></span>&#123;</div><div class="line">    Switcher mSwitcher=<span class="keyword">new</span> Swticher();</div><div class="line">    mSwitcher.onSwitchon();</div><div class="line">    mSwitcher.onSwitchoff();</div><div class="line">    mSwitcher.setOnSwitchListener(<span class="keyword">this</span>);</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>空调需要一个开关的两个功能on()和off(),总不能去继承开关吧，而开关作为一个类提供内部接口on()和off(), 空调实现这两个接口就能开启自己的送风啦．同理冰箱开启就能开启自己的制冷模式．</p><p>说了这么多，来看看python的”接口回调吧”，别忘了接口回调的目的：从一个对象给另外一个对象发消息，对象收到消息后自己去做自己想做的事．</p><p><strong><em>了解之前，先看看什么是WSGI：</em></strong></p><p>WSGI区分为两个部分：一为“服务器”或“网关”，另一为“应用程序”或“应用框架”。在处理一个WSGI请求时，服务器会为应用程序提供环境信息及一个回调函数（Callback Function）。当应用程序完成处理请求后，通过前述的回调函数，将结果回传给服务器。</p><p>看看服务器部分的实例代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</div><div class="line"><span class="keyword">from</span> MyWebFramework <span class="keyword">import</span> Application</div><div class="line">设置静态文件根目录</div><div class="line">HTML_ROOT_DIR = <span class="string">"./html"</span></div><div class="line">WSGI_PYTHON_DIR = <span class="string">"./wsgipython"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTPServer</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">""""""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, application)</span>:</span></div><div class="line">        <span class="string">"""构造函数， application指的是框架的app"""</span></div><div class="line">        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</div><div class="line">        self.app = application</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></div><div class="line">        self.server_socket.listen(<span class="number">128</span>)</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            client_socket, client_address = self.server_socket.accept()</div><div class="line">            <span class="comment"># print("[%s, %s]用户连接上了" % (client_address[0],client_address[1]))</span></div><div class="line">            print(<span class="string">"[%s, %s]用户连接上了"</span> % client_address)</div><div class="line">            handle_client_process = Process(target=self.handle_client, args=(client_socket,))</div><div class="line">            handle_client_process.start()</div><div class="line">            client_socket.close()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(self, status, headers)</span>:</span></div><div class="line">        response_headers = <span class="string">"HTTP/1.1 "</span> + status + <span class="string">"\r\n"</span></div><div class="line">        <span class="keyword">for</span> header <span class="keyword">in</span> headers:</div><div class="line">            response_headers += <span class="string">"%s: %s\r\n"</span> % header</div><div class="line">        self.response_headers = response_headers</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_client</span><span class="params">(self, client_socket)</span>:</span></div><div class="line">        <span class="string">"""处理客户端请求"""</span></div><div class="line">        <span class="comment"># 获取客户端请求数据</span></div><div class="line">        request_data = client_socket.recv(<span class="number">1024</span>)</div><div class="line">        print(<span class="string">"request data:"</span>, request_data)</div><div class="line">        request_lines = request_data.splitlines()</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> request_lines:</div><div class="line">            print(line)</div><div class="line">        <span class="comment"># 解析请求报文</span></div><div class="line">        <span class="comment"># 'GET / HTTP/1.1'</span></div><div class="line">        request_start_line = request_lines[<span class="number">0</span>]</div><div class="line">        <span class="comment"># 提取用户请求的文件名</span></div><div class="line">        print(<span class="string">"*"</span> * <span class="number">10</span>)</div><div class="line">        print(request_start_line.decode(<span class="string">"utf-8"</span>))</div><div class="line">        file_name = re.match(<span class="string">r"\w+ +(/[^ ]*) "</span>, request_start_line.decode(<span class="string">"utf-8"</span>)).group(<span class="number">1</span>)</div><div class="line">        method = re.match(<span class="string">r"(\w+) +/[^ ]* "</span>, request_start_line.decode(<span class="string">"utf-8"</span>)).group(<span class="number">1</span>)</div><div class="line">        env = &#123;</div><div class="line">            <span class="string">"PATH_INFO"</span>: file_name,</div><div class="line">            <span class="string">"METHOD"</span>: method</div><div class="line">        &#125;</div><div class="line">        response_body = self.app(env, self.start_response)</div><div class="line">        response = self.response_headers + <span class="string">"\r\n"</span> + response_body</div><div class="line">        <span class="comment"># 向客户端返回响应数据</span></div><div class="line">        client_socket.send(bytes(response, <span class="string">"utf-8"</span>))</div><div class="line">        <span class="comment"># 关闭客户端连接</span></div><div class="line">        client_socket.close()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bind</span><span class="params">(self, port)</span>:</span></div><div class="line">        self.server_socket.bind((<span class="string">""</span>, port))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    sys.path.insert(<span class="number">1</span>, WSGI_PYTHON_DIR)</div><div class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</div><div class="line">        sys.exit(<span class="string">"python MyWebServer.py Module:app"</span>)</div><div class="line">    <span class="comment"># python MyWebServer.py  MyWebFrameWork:app</span></div><div class="line">    module_name, app_name = sys.argv[<span class="number">1</span>].split(<span class="string">":"</span>)</div><div class="line">    <span class="comment"># module_name = "MyWebFrameWork"</span></div><div class="line">    <span class="comment"># app_name = "app"</span></div><div class="line">    m = __import__(module_name)</div><div class="line">    app = getattr(m, app_name)</div><div class="line">    http_server = HTTPServer(app)</div><div class="line">    <span class="comment"># http_server.set_port</span></div><div class="line">    http_server.bind(<span class="number">8000</span>)</div><div class="line">    http_server.start()</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p><p>应用程序代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="comment"># from MyWebServer import HTTPServer</span></div><div class="line"><span class="comment"># 设置静态文件根目录</span></div><div class="line">HTML_ROOT_DIR = <span class="string">"./html"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""框架的核心部分，也就是框架的主题程序，框架是通用的"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, urls)</span>:</span></div><div class="line">        <span class="comment"># 设置路由信息</span></div><div class="line">        self.urls = urls</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, env, start_response)</span>:</span></div><div class="line">        path = env.get(<span class="string">"PATH_INFO"</span>, <span class="string">"/"</span>)</div><div class="line">        <span class="comment"># /static/index.html</span></div><div class="line">        <span class="keyword">if</span> path.startswith(<span class="string">"/static"</span>):</div><div class="line">            <span class="comment"># 要访问静态文件</span></div><div class="line">            file_name = path[<span class="number">7</span>:]</div><div class="line">            <span class="comment"># 打开文件，读取内容</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                file = open(HTML_ROOT_DIR + file_name, <span class="string">"rb"</span>)</div><div class="line">            <span class="keyword">except</span> IOError:</div><div class="line">                <span class="comment"># 代表未找到路由信息，404错误</span></div><div class="line">                status = <span class="string">"404 Not Found"</span></div><div class="line">                headers = []</div><div class="line">                start_response(status, headers)</div><div class="line">                <span class="keyword">return</span> <span class="string">"not found"</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                file_data = file.read()</div><div class="line">                file.close()</div><div class="line">                status = <span class="string">"200 OK"</span></div><div class="line">                headers = []</div><div class="line">                start_response(status, headers)</div><div class="line">                <span class="keyword">return</span> file_data.decode(<span class="string">"utf-8"</span>)</div><div class="line">        <span class="keyword">for</span> url, handler <span class="keyword">in</span> self.urls:</div><div class="line">            <span class="comment">#("/ctime", show_ctime)</span></div><div class="line">            <span class="keyword">if</span> path == url:</div><div class="line">                <span class="keyword">return</span> handler(env, start_response)</div><div class="line">        <span class="comment"># 代表未找到路由信息，404错误</span></div><div class="line">        status = <span class="string">"404 Not Found"</span></div><div class="line">        headers = []</div><div class="line">        start_response(status, headers)</div><div class="line">        <span class="keyword">return</span> <span class="string">"not found"</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_ctime</span><span class="params">(env, start_response)</span>:</span></div><div class="line">    status = <span class="string">"200 OK"</span></div><div class="line">    headers = [</div><div class="line">        (<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)</div><div class="line">    ]</div><div class="line">    start_response(status, headers)</div><div class="line">    <span class="keyword">return</span> time.ctime()</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(env, start_response)</span>:</span></div><div class="line">    status = <span class="string">"200 OK"</span></div><div class="line">    headers = [</div><div class="line">        (<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)</div><div class="line">    ]</div><div class="line">    start_response(status, headers)</div><div class="line">    <span class="keyword">return</span> <span class="string">"hello django"</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_haha</span><span class="params">(env, start_response)</span>:</span></div><div class="line">    status = <span class="string">"200 OK"</span></div><div class="line">    headers = [</div><div class="line">        (<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)</div><div class="line">    ]</div><div class="line">    start_response(status, headers)</div><div class="line">    <span class="keyword">return</span> <span class="string">"hello haha"</span></div><div class="line">urls = [</div><div class="line">            (<span class="string">"/"</span>, show_ctime),</div><div class="line">            (<span class="string">"/ctime"</span>, show_ctime),</div><div class="line">            (<span class="string">"/sayhello"</span>, say_hello),</div><div class="line">            (<span class="string">"/sayhaha"</span>, say_haha),</div><div class="line">        ]</div><div class="line">django_app = Application(urls)</div></pre></td></tr></table></figure></p><p>WSGI核心代码部分：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(self, status, headers)</span>:</span></div><div class="line">    response_headers = <span class="string">"HTTP/1.1 "</span> + status + <span class="string">"\r\n"</span></div><div class="line">    <span class="keyword">for</span> header <span class="keyword">in</span> headers:</div><div class="line">        response_headers += <span class="string">"%s: %s\r\n"</span> % header</div><div class="line">    self.response_headers = response_headers</div><div class="line">response_body = self.app(env, self.start_response)</div><div class="line">response = self.response_headers + <span class="string">"\r\n"</span> +response_body</div></pre></td></tr></table></figure></p><p>服务端收到后组装响应:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">response = self.response_headers + <span class="string">"\r\n"</span> + response_body</div><div class="line">client_socket.send(bytes(response, <span class="string">"utf-8"</span>))</div></pre></td></tr></table></figure></p><p>###有点绕，来理一理###</p><p>回到java来看看：两个类一个冰箱类一个开关类，冰箱需要开关逻辑，冰箱内置开关类对象并实现开关提供开关的方法后，开关给冰箱发消息，冰箱去做自己之后的处理．</p><p>python wsgi的逻辑：两个类一个服务器类一个应用框架类，服务器类内置应用类对象并实现一个抽象的响应方法，应用类拿到去实现这个方法返回具体内容给服务器组装响应体．</p><p>#假如让java去实现wsgi的逻辑该怎么做？<br>1.服务端开始调内置应用端对象的app方法,java不能传一个函数进去，所以只能<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   app(env)</div><div class="line">#在java里面是没有_call_属性的，这样写更java　mApp._call_(env)</div></pre></td></tr></table></figure></p><p>2.2.env里面标记具体实现哪个应用类，组转好了响应体后定义一个接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">onCompleteListener</span>(<span class="title">String</span> <span class="title">s</span>)</span>&#123;</div><div class="line">       <span class="function"><span class="keyword">void</span> <span class="title">response</span><span class="params">(s)</span></span>;</div><div class="line">&#125;</div><div class="line">onCompleteListener onCompleteListener;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnCompleteListener</span><span class="params">(onCompleteListener o)</span></span>&#123;</div><div class="line">     onCompleteListener=o;</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="keyword">private</span> __call＿（env）&#123;</div><div class="line">      ....</div><div class="line">      string responsebody=<span class="string">"..."</span>;</div><div class="line">      onCompleteListener.response(responsebody);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3.应用端给服务端发了消息了，服务端接收：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mApp.setOnCompleteListener(<span class="keyword">new</span> onCompleteListener()&#123;</div><div class="line">   <span class="meta">@override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">(String s)</span></span>&#123;</div><div class="line">          <span class="comment">//服务端拿到s后去做处理</span></div><div class="line">&#125;</div><div class="line">);</div></pre></td></tr></table></figure></p><p>４．拼接返回的body，给请求端返回．</p><p>以上就是Java接口回调的思想．</p><p>看python咋做的：</p><p>１．直接传一个start_response对象引用进去．python里面啥都是对象，我不管我不听我就要<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response_body = self.app(env, self.start_response</div></pre></td></tr></table></figure></p><p>２．把这个对象的引用传过去获取到具体应用程序返回的body后，调用服务器这个函数引用．并将应用程序return 掉．</p><p>３．服务器执行应用程序端的调用，拼接请求体，给请求端返回．</p><p>#java一脸懵逼．．．．</p><p>后记：函数也是对象，在python闭包和装饰器中体现的很深刻，有时间来说说．</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接口回调时java的一种说法，python是没有接口回调这个概念的，但是却可以巧妙的实现，而且实现的比java更省代码，先来说说Java的接口回调是怎么回事吧．&lt;br&gt;
    
    </summary>
    
      <category term="python初探" scheme="http://yoursite.com/categories/python%E5%88%9D%E6%8E%A2/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
